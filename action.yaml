name: Staging Deploy Docker Image for Lambdas
description: "Build docker image, tag, upload and set on lambdas"
inputs:
  lambda_names:
    description: Function names separated by comma
    required: true
  aws_access_key_id:
    description: AWS Key ID
    required: true
  aws_secret_access_key:
    description: AWS Secret Access Key
    required: true
  ecr_image_name:
    description: Define the repository of ECR image
    required: true
  ecr_image_tag:
    description: Define the tag of ECR image
    required: true
  build_working_directory:
    description: Define the path of working directory of code to build Docker image
    required: true
  docker_build_extra_args:
    description: Define the extra arguments that you will set to docker build command
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws_access_key_id }}
        aws-secret-access-key: ${{ inputs.aws_secret_access_key }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Setup Sam
      uses: aws-actions/setup-sam@v1

    - name: Build, tag, and push image to Amazon ECR and update function
      shell: bash
      working-directory: ${{ inputs.build_working_directory }}
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.ecr_image_name }}
        FUNCTION_NAMES: ${{ inputs.lambda_names }}
        ECR_IMAGE_NAME: ${{ inputs.ecr_image_tag }}
      run: |
        if docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$ECR_IMAGE_NAME ; then
            echo "Already existed image; skipping."
        else
          docker build ${{ inputs.docker_build_extra_args }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$ECR_IMAGE_NAME -f ./Dockerfile.serverless .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$ECR_IMAGE_NAME
        fi

        for functionName in $FUNCTION_NAMES; do
          aws lambda update-function-code --function-name $functionName --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$ECR_IMAGE_NAME
        done
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$ECR_IMAGE_NAME"
